#!/bin/sh
# recovery_1st_stage
# NOTE: This script must be placed in the PGDATA directory and the filename must
#       be the same as the recovery_1st_stage_command in pgpool.conf
# NOTE: This script is executed on the primary server by the postgres user.
# http://www.pgpool.net/docs/latest/pgpool-ja.html#online_recovery_in_stream_mode
set -eu

echo start args=$* UID=$UID | logger -t recovery_1st_stage

PGDATA=$1
REMOTE_HOST=$2
REMOTE_PGDATA=$3
PORT=$4
# NOTE: We assume the port number of PostgreSQL is same across servers.

primary_host=`hostname`

ARCHIVE_DIR={{ postgresql_archive_dir }}

ssh_cmd="/bin/ssh -T postgres@$REMOTE_HOST"

$ssh_cmd "
mv $REMOTE_PGDATA $REMOTE_PGDATA.`date +%Y-%m-%d-%H-%M-%S`
{{ postgresql_bin_dir }}/pg_basebackup -h $primary_host -U {{ postgresql_replication_user }} -D $REMOTE_PGDATA -x -c fast
"
echo pg_basebackup done. | logger -t recovery_1st_stage

$ssh_cmd "
rm -f $REMOTE_PGDATA/{{ pgpool2_promote_trigger_filename }}
rm -rf $ARCHIVE_DIR/*
mkdir -p $REMOTE_PGDATA/pg_xlog/archive_status
"
echo created archive_status. | logger -t recovery_1st_stage

$ssh_cmd "
sed -i -e 's/^#? *hot_standby *= *off/hot_standby = on/' $REMOTE_PGDATA/postgresql.conf
"
echo enabled hot_standby in postgresql.conf. | logger -t recovery_1st_stage

$ssh_cmd "
cd $REMOTE_PGDATA
cat > recovery.conf << EOT
standby_mode = 'on'
primary_conninfo = 'host=$primary_host port=$PORT user={{ postgresql_replication_user }}'
restore_command = 'scp $primary_host:$ARCHIVE_DIR/%f %p'
trigger_file = '$REMOTE_PGDATA/{{ pgpool2_promote_trigger_filename }}'
EOT
"
echo created recovery.conf. | logger -t recovery_1st_stage
