#!/bin/bash -x
set -u

#CREATE FUNCTION pgpool_recovery(IN script_name text,
#           IN remote_host text,
#           IN remote_data_directory text,
#           IN remote_port text)
#
# starting recovery command: "SELECT pgpool_recovery('/usr/local/sbin/recovery_1st_stage.sh', 'pgsql1', '/var/lib/pgsql/9.5/data', '5432')"

REMOTE_HOST=$1
REMOTE_PGDATA=$2
PORT=$3

ARCHIVE_DIR={{ postgresql_archive_dir }}

echo recovery_1st_stage.sh start REMOTE_HOST=$1 REMOTE_PGDATA=$2 PORT=$3 | logger -t recovery_1st_stage.sh

ssh_cmd="/bin/ssh -T postgres@$REMOTE_HOST"
if [ $UID -eq 0 ]; then
  ssh_cmd="/bin/sudo -u postgres $ssh_cmd"
fi

$ssh_cmd "
#rm -rf $REMOTE_PGDATA
mv $REMOTE_PGDATA $REMOTE_PGDATA.`date +%Y-%m-%d-%H-%M-%S`
{{ postgresql_bin_dir }}/pg_basebackup -h {{ postgresql_self_ipaddr }} -U {{ postgresql_replication_user }} -D $REMOTE_PGDATA -x -c fast
rm -f $REMOTE_PGDATA/trigger

rm -rf $ARCHIVE_DIR/*
mkdir -p $REMOTE_PGDATA/pg_xlog/archive_status

cd $REMOTE_PGDATA
cp postgresql.conf postgresql.conf.bak
sed -e 's/#*hot_standby = off/hot_standby = on/' postgresql.conf.bak > postgresql.conf
rm -f postgresql.conf.bak
cat > recovery.conf << EOT
standby_mode = 'on'
primary_conninfo = 'host="{{ postgresql_self_ipaddr }}" port=$PORT user={{ postgresql_replication_user }}'
restore_command = 'scp {{ postgresql_self_ipaddr }}:$ARCHIVE_DIR/%f %p'
trigger_file = '$REMOTE_PGDATA/trigger'
EOT
"
